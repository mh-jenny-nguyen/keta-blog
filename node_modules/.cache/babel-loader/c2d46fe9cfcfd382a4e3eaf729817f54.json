{"ast":null,"code":"var _jsxFileName = \"/Users/jennynguyen/Beta/keta-blog/src/context.js\";\nimport React, { Component } from 'react';\nimport Client from './contentful';\nconst PostContext = React.createContext();\n\nclass PostProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: [],\n      filterPosts: [],\n      loading: true,\n      keyword: ''\n    };\n\n    this.getData = async () => {\n      try {\n        let response = await Client.getEntries({\n          content_type: \"post\",\n          order: \"fields.dateUpdated\"\n        });\n        let posts = this.formatData(response.items);\n        this.setState({\n          posts: posts,\n          loading: false\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getPost = slug => {\n      let tempPost = [...this.state.posts];\n      const post = this.state.posts.find(post => {\n        return post.slug === slug;\n      });\n      console.log(post);\n      return post;\n    };\n\n    this.formatDate = date => {\n      const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      let tempDate = new Date(date);\n      let string = monthNames[tempDate.getMonth()] + ' ' + (\"0\" + tempDate.getDate()).slice(-2) + ', ' + tempDate.getFullYear();\n      return string;\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let image = item.fields.image.fields.file.url;\n      let author = {\n        name: item.fields.author.fields.name,\n        description: item.fields.author.fields.description,\n        avatar: item.fields.author.fields.avatar.fields.file.url,\n        url: item.fields.author.fields.url\n      };\n      let dateCreated = this.formatDate(item.fields.dateCreated);\n      let dateUpdated = this.formatDate(item.fields.dateUpdated);\n      let post = { ...item.fields,\n        id,\n        image,\n        author,\n        dateCreated,\n        dateUpdated\n      };\n      return post;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(PostContext.Provider, {\n      value: { ...this.state,\n        getPost: this.getPost\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 4\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst PostConsumer = PostContext.Consumer;\nexport function withPostConsumer(Component) {\n  return function consumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(PostConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 10\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 14\n      }\n    })));\n  };\n}\nexport { PostProvider, PostConsumer, PostContext };","map":{"version":3,"sources":["/Users/jennynguyen/Beta/keta-blog/src/context.js"],"names":["React","Component","Client","PostContext","createContext","PostProvider","state","posts","filterPosts","loading","keyword","getData","response","getEntries","content_type","order","formatData","items","setState","error","console","log","getPost","slug","tempPost","post","find","formatDate","date","monthNames","tempDate","Date","string","getMonth","getDate","slice","getFullYear","componentDidMount","tempItems","map","item","id","sys","image","fields","file","url","author","name","description","avatar","dateCreated","dateUpdated","render","props","children","PostConsumer","Consumer","withPostConsumer","consumerWrapper","value"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Client from './contentful';\n\nconst PostContext = React.createContext();\n\nclass PostProvider extends Component {\n\tstate = {\n\t\tposts: [],\n\t\tfilterPosts: [],\n\t\tloading: true,\n\t\tkeyword: ''\n\t}\n\n\tgetData = async () => {\n\t\ttry{\n\t\t\tlet response = await Client.getEntries({\n\t\t\t\tcontent_type: \"post\",\n\t\t\t\torder: \"fields.dateUpdated\"\n\t\t\t});\n\n\t\t\tlet posts = this.formatData(response.items);\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tposts: posts,\n\t\t\t\tloading: false\n\t\t\t});\n\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tcomponentDidMount () {\n\t\tthis.getData();\n\t}\n\n\tformatData (items) {\n\t\tlet tempItems = items.map(item => {\n\n\t\t\tlet id = item.sys.id\n\t\t\tlet image = item.fields.image.fields.file.url;\n\t\t\tlet author = {\n\t\t\t\tname: item.fields.author.fields.name,\n\t\t\t\tdescription: item.fields.author.fields.description,\n\t\t\t\tavatar: item.fields.author.fields.avatar.fields.file.url,\n\t\t\t\turl: item.fields.author.fields.url,\n\t\t\t}\n\n\t\t\tlet dateCreated = this.formatDate(item.fields.dateCreated);\n\t\t\tlet dateUpdated = this.formatDate(item.fields.dateUpdated);\n\n\t\t\tlet post = {...item.fields, id, image, author, dateCreated, dateUpdated};\n\n\t\t\treturn post;\n\t\t});\n\n\t\treturn tempItems;\n\t}\n\n\tgetPost = (slug) => {\n\t\tlet tempPost = [...this.state.posts]\n\t\tconst post = this.state.posts.find( post => {\n\t\t\treturn post.slug === slug;\n\t\t});\n\n\t\tconsole.log(post);\n\n\t\treturn post;\n\t}\n\n\tformatDate = (date) => {\n\t\tconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n\t\t  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n\t\t];\n\t\tlet tempDate = new Date(date);\n\t\tlet string = monthNames[tempDate.getMonth()] + ' ' + (\"0\" + tempDate.getDate()).slice(-2) + ', ' + tempDate.getFullYear();\n\t\t\n\t\treturn string;\n\t} \n\n\trender() {\n\t\treturn(\n\t\t\t<PostContext.Provider value={{...this.state, getPost: this.getPost}}>\n\t\t\t\t{this.props.children}\n\t\t\t</PostContext.Provider>\n\t\t);\n\t}\n}\n\nconst PostConsumer = PostContext.Consumer;\n\nexport function withPostConsumer(Component) {\n\treturn function consumerWrapper(props) {\n\t\treturn <PostConsumer>\n\t\t\t{value => <Component {...props} context={value} /> }\n\t\t</PostConsumer>\n\t}\n}\n\nexport {PostProvider, PostConsumer, PostContext}"]},"metadata":{},"sourceType":"module"}