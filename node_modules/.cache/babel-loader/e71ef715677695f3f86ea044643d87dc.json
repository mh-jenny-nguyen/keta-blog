{"ast":null,"code":"var _jsxFileName = \"/Users/jennynguyen/Beta/keta-blog/src/context.js\";\nimport React, { Component } from 'react';\nimport Client from './contentful';\nimport { Redirect } from 'react-router';\nconst PostContext = React.createContext();\n\nclass PostProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: [],\n      filterPosts: [],\n      currentPosts: [],\n      loading: true,\n      featuredPost: [],\n      currentPage: 1,\n      previousPage: 1,\n      nextPage: 2,\n      numberPerPage: 8,\n      totalOfPost: 0,\n      totalOfPage: 0\n    };\n\n    this.getData = async () => {\n      try {\n        let response = await Client.getEntries({\n          content_type: \"post\",\n          order: \"fields.dateUpdated\"\n        });\n        let posts = this.formatData(response.items);\n        let featuredPost = posts.filter(post => post.featured === true);\n        let currentPosts = this.getPostByPage(this.state.currentPage, posts);\n        this.setState({\n          posts: posts,\n          loading: false,\n          featuredPost: featuredPost,\n          TotalOfPost: posts.length,\n          currentPosts: currentPosts,\n          totalOfPage: Math.ceil(posts.length / this.state.numberPerPage)\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getPostByPage = (page = 1, posts = '') => {\n      let startIndex = 0;\n      let endIndex = this.state.numberPerPage;\n      posts = posts.length > 0 ? posts : this.state.posts;\n\n      if (page > 1) {\n        startIndex = (page - 1) * this.state.numberPerPage;\n        endIndex = this.state.numberPerPage * page - 1;\n      }\n\n      let tempPosts = posts.slice(startIndex, endIndex);\n      return tempPosts;\n    };\n\n    this.handleLoadPage = (page = 1) => {\n      debugger;\n      let currentPosts = this.getPostByPage(page);\n      this.setState({\n        currentPage: page,\n        currentPosts: currentPosts,\n        previousPage: page > 1 ? page - 1 : page,\n        nextPage: page < this.state.totalOfPost ? page + 1 : this.state.totalOfPost\n      });\n    };\n\n    this.formatData = items => {\n      let tempItems = items.map(item => {\n        let id = item.sys.id;\n        let image = item.fields.image.fields.file.url;\n        let author = {\n          name: item.fields.author.fields.name,\n          description: item.fields.author.fields.description,\n          avatar: item.fields.author.fields.avatar.fields.file.url,\n          url: item.fields.author.fields.url\n        };\n        let dateCreated = this.formatDate(item.fields.dateCreated);\n        let dateUpdated = this.formatDate(item.fields.dateUpdated);\n        let post = { ...item.fields,\n          id,\n          image,\n          author,\n          dateCreated,\n          dateUpdated\n        };\n        return post;\n      });\n      return tempItems;\n    };\n\n    this.getPost = slug => {\n      const post = this.state.posts.find(post => {\n        return post.slug === slug;\n      });\n      return post;\n    };\n\n    this.formatDate = date => {\n      const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      let tempDate = new Date(date);\n      let string = monthNames[tempDate.getMonth()] + ' ' + (\"0\" + tempDate.getDate()).slice(-2) + ', ' + tempDate.getFullYear();\n      return string;\n    };\n\n    this.filterPostByKeyWord = keyword => {\n      console.log('filter post');\n      this.state.posts.forEach(post => {});\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(PostContext.Provider, {\n      value: { ...this.state,\n        getPost: this.getPost,\n        handleLoadPage: this.handleLoadPage,\n        getPostByPage: this.getPostByPage,\n        filterPostByKeyWord: this.filterPostByKeyWord\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 4\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst PostConsumer = PostContext.Consumer;\nexport function withPostConsumer(Component) {\n  return function consumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(PostConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 10\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 14\n      }\n    })));\n  };\n}\nexport { PostProvider, PostConsumer, PostContext };","map":{"version":3,"sources":["/Users/jennynguyen/Beta/keta-blog/src/context.js"],"names":["React","Component","Client","Redirect","PostContext","createContext","PostProvider","state","posts","filterPosts","currentPosts","loading","featuredPost","currentPage","previousPage","nextPage","numberPerPage","totalOfPost","totalOfPage","getData","response","getEntries","content_type","order","formatData","items","filter","post","featured","getPostByPage","setState","TotalOfPost","length","Math","ceil","error","console","log","page","startIndex","endIndex","tempPosts","slice","handleLoadPage","tempItems","map","item","id","sys","image","fields","file","url","author","name","description","avatar","dateCreated","formatDate","dateUpdated","getPost","slug","find","date","monthNames","tempDate","Date","string","getMonth","getDate","getFullYear","filterPostByKeyWord","keyword","forEach","componentDidMount","render","props","children","PostConsumer","Consumer","withPostConsumer","consumerWrapper","value"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Client from './contentful';\nimport { Redirect } from 'react-router';\n\nconst PostContext = React.createContext();\n\nclass PostProvider extends Component {\n\tstate = {\n\t\tposts: [],\n\t\tfilterPosts: [],\n\t\tcurrentPosts: [],\n\t\tloading: true,\n\t\tfeaturedPost: [],\n\t\tcurrentPage: 1,\n\t\tpreviousPage: 1,\n\t\tnextPage: 2,\n\t\tnumberPerPage: 8,\n\t\ttotalOfPost: 0,\n\t\ttotalOfPage: 0,\n\t}\n\n\tgetData = async () => {\n\t\ttry{\n\t\t\tlet response = await Client.getEntries({\n\t\t\t\tcontent_type: \"post\",\n\t\t\t\torder: \"fields.dateUpdated\"\n\t\t\t});\n\n\t\t\tlet posts = this.formatData(response.items);\n\t\t\tlet featuredPost = posts.filter(post => post.featured === true);\n\t\t\tlet currentPosts = this.getPostByPage(this.state.currentPage, posts);\n\n\t\t\tthis.setState({\n\t\t\t\tposts: posts,\n\t\t\t\tloading: false,\n\t\t\t\tfeaturedPost: featuredPost,\n\t\t\t\tTotalOfPost: posts.length,\n\t\t\t\tcurrentPosts: currentPosts,\n\t\t\t\ttotalOfPage: Math.ceil(posts.length / this.state.numberPerPage)\n\n\t\t\t});\n\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tgetPostByPage = (page = 1, posts = '') => {\n\t\tlet startIndex = 0;\n\t\tlet endIndex = this.state.numberPerPage;\n\t\tposts = (posts.length > 0 ? posts : this.state.posts);\n\n\t\tif(page > 1) {\n\t\t\tstartIndex = (page - 1) * this.state.numberPerPage;\n\t\t\tendIndex = (this.state.numberPerPage * page) - 1;\n\t\t}\n\t\t\n\t\tlet tempPosts = posts.slice(startIndex, endIndex);\n\n\t\treturn tempPosts;\n\t}\n\n\thandleLoadPage =  (page = 1) => {\n\t\tdebugger;\n\t\tlet currentPosts = this.getPostByPage(page);\n\n\t\tthis.setState({\n\t\t\tcurrentPage: page,\n\t\t\tcurrentPosts: currentPosts,\n\t\t\tpreviousPage: (page > 1 ? page - 1 : page ),\n\t\t\tnextPage: (page < this.state.totalOfPost ? page + 1 : this.state.totalOfPost),\n\t\t});\n \t}\n\n\tcomponentDidMount () {\n\t\tthis.getData();\n\t}\n\n\tformatData =  (items) => {\n\t\tlet tempItems = items.map(item => {\n\n\t\t\tlet id = item.sys.id\n\t\t\tlet image = item.fields.image.fields.file.url;\n\t\t\tlet author = {\n\t\t\t\tname: item.fields.author.fields.name,\n\t\t\t\tdescription: item.fields.author.fields.description,\n\t\t\t\tavatar: item.fields.author.fields.avatar.fields.file.url,\n\t\t\t\turl: item.fields.author.fields.url,\n\t\t\t}\n\n\t\t\tlet dateCreated = this.formatDate(item.fields.dateCreated);\n\t\t\tlet dateUpdated = this.formatDate(item.fields.dateUpdated);\n\n\t\t\tlet post = {...item.fields, id, image, author, dateCreated, dateUpdated};\n\n\t\t\treturn post;\n\t\t});\n\n\t\treturn tempItems;\n\t}\n\n\tgetPost = (slug) => {\n\t\tconst post = this.state.posts.find( post => {\n\t\t\treturn post.slug === slug;\n\t\t});\n\n\t\treturn post;\n\t}\n\n\tformatDate = (date) => {\n\t\tconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n\t\t  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n\t\t];\n\t\tlet tempDate = new Date(date);\n\t\tlet string = monthNames[tempDate.getMonth()] + ' ' + (\"0\" + tempDate.getDate()).slice(-2) + ', ' + tempDate.getFullYear();\n\t\t\n\t\treturn string;\n\t} \n\n\tfilterPostByKeyWord = (keyword) => {\n\t\tconsole.log('filter post');\n\n\t\tthis.state.posts.forEach( post => {\n\t\t});\n\t}\n \n\trender() {\n\t\treturn(\n\t\t\t<PostContext.Provider value={{ ...this.state, getPost: this.getPost, handleLoadPage: this.handleLoadPage, getPostByPage: this.getPostByPage, filterPostByKeyWord: this.filterPostByKeyWord }}>\n\t\t\t\t{this.props.children}\n\t\t\t</PostContext.Provider>\n\t\t);\n\t}\n}\n\nconst PostConsumer = PostContext.Consumer;\n\nexport function withPostConsumer(Component) {\n\treturn function consumerWrapper(props) {\n\t\treturn <PostConsumer>\n\t\t\t{value => <Component {...props} context={value} /> }\n\t\t</PostConsumer>\n\t}\n}\n\nexport {PostProvider, PostConsumer, PostContext}"]},"metadata":{},"sourceType":"module"}